// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
insert into posts (id, created_at, updated_at, title, url, description, published_at, feed_id)
values ($1, now(), now(), $2, $3, $4, $5, $6)
returning id, created_at, updated_at, title, url, description, published_at, feed_id
`

type CreatePostParams struct {
	ID          uuid.UUID
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const getLatestPosts = `-- name: GetLatestPosts :many
select posts.id, posts.created_at, posts.updated_at, title, url, description, published_at, posts.feed_id, feed_follows.id, user_id, feed_follows.feed_id, feed_follows.created_at, feed_follows.updated_at, users.id, users.created_at, users.updated_at, name
from posts
join feed_follows on feed_follows.feed_id = posts.feed_id
join users on users.id = feed_follows.user_id
where users.Name = $1
limit $2
`

type GetLatestPostsParams struct {
	Name  string
	Limit int32
}

type GetLatestPostsRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID      uuid.UUID
	ID_2        uuid.UUID
	UserID      uuid.UUID
	FeedID_2    uuid.UUID
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	ID_3        uuid.UUID
	CreatedAt_3 sql.NullTime
	UpdatedAt_3 sql.NullTime
	Name        string
}

func (q *Queries) GetLatestPosts(ctx context.Context, arg GetLatestPostsParams) ([]GetLatestPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLatestPosts, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLatestPostsRow
	for rows.Next() {
		var i GetLatestPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.ID_2,
			&i.UserID,
			&i.FeedID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPosts = `-- name: GetPosts :many
select posts.id, posts.created_at, posts.updated_at, title, url, description, published_at, posts.feed_id, feed_follows.id, user_id, feed_follows.feed_id, feed_follows.created_at, feed_follows.updated_at, users.id, users.created_at, users.updated_at, name
from posts
join feed_follows on feed_follows.feed_id = posts.feed_id
join users on users.id = feed_follows.user_id
where users.Name = $1
`

type GetPostsRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID      uuid.UUID
	ID_2        uuid.UUID
	UserID      uuid.UUID
	FeedID_2    uuid.UUID
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	ID_3        uuid.UUID
	CreatedAt_3 sql.NullTime
	UpdatedAt_3 sql.NullTime
	Name        string
}

func (q *Queries) GetPosts(ctx context.Context, name string) ([]GetPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.ID_2,
			&i.UserID,
			&i.FeedID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
